name: Perf - Runtime

on:
  push:
    branches: [ master ]
  pull_request:
    branches: '*'

jobs:
  benchmark:
    strategy:
      fail-fast: false
      # `matrix` creates a job matrix (Cartesian product of possible values for each var)
      # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
      matrix:
        component:
          - locale
          - num-util
          - uniset
      # Ensure that commits when pushing GH pages to external has linear commit
      # history w/o merges (to keep things simpler). Do this via max-parallel=1.
      # Also, necessary b/c can't figure out how to use component-specific branches
      # and coordinate between the benchmark action step and the GH pages action step.
      max-parallel: 1

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Debug branches
        run: echo "git branch" && git branch

      # Download previous benchmark result from cache (if exists)
      - name: Download previous benchmark data
        uses: actions/cache@v1
        with:
          path: dev/${{ matrix.component }}/bench/cache
          key: ${{ runner.os }}-benchmark-${{ matrix.component }}

      - name: Debug cache info
        run: echo "ls -l dev" && ls -l dev && echo "ls -l dev/${{ matrix.component }}/bench/cache" && ls -l dev/${{ matrix.component }}/bench/cache
      #- run: mkdir -p dev/${{ matrix.component }}/bench/cache

      - name: Try on a particular component
        run: cd components/${{ matrix.component }}

      - name: Run benchmark
        run: cd components/${{ matrix.component }} && (cargo bench -- --output-format bencher | tee output.txt) && cd ../..

      - name: Debug benchmark output dir
        run: echo "ls -l components/${{ matrix.component }}" && ls -l components/${{ matrix.component }}

      - name: Copy benchmark raw output to cache dir
        run: cp components/${{ matrix.component }}/output.txt dev/${{ matrix.component }}/bench/cache

      - name: Debug cache info
        run: echo "ls -l dev" && ls -l dev && echo "ls -l dev/${{ matrix.component }}/bench/cache" && ls -l dev/${{ matrix.component }}/bench/cache

      - name: Store benchmark result (create dashboard)
        uses: rhysd/github-action-benchmark@v1.8.1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: components/${{ matrix.component }}/output.txt
          # Use personal access token instead of GITHUB_TOKEN due to https://github.community/t5/GitHub-Actions/Github-action-not-triggering-gh-pages-upon-push/td-p/26869/highlight/false
          # Not using this action to push GH pages, so using GITHUB_TOKEN b/c it is just for commenting on the commit on alert
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'
          comment-on-alert: true
          fail-on-alert: true
          alert-comment-cc-users: '@sffc @zbraniecki @echeran'
          gh-pages-branch: gh-pages

      - name: Debug branches
        run: echo "git branch" && git branch

      - name: Dashboard -> Github Pages
        uses: peaceiris/actions-gh-pages@v3.7.0-6  # this is a beta version to enable `destination_dir`
        ## Only create docs for merges/pushes to master (skip PRs).
        ## Multiple unfinished PRs should not clobber docs from approved code.
#        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        with:
          # Setup for publishing to an external repo using `deploy_key` option:
          #
          # Step 1 - Create SSH key pair. Use your public key as a Github "Deploy Key" and your private
          # key as a Github "Secret". Where to register these keys comes next.
          # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-create-ssh-deploy-key
          #
          # Step 2 - After creating public/private key pair, put the private key in the repo running the
          # action as a Secret and call it "ACTIONS_DEPLOY_KEY". Put the public key as a Deploy Key in the
          # target repo where the Github Pages will be copied to.
          # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-deploy-to-external-repository
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
#          external_repository: unicode-org/icu4x-docs
          external_repository: echeran/icu4x-docs
          publish_branch: gh-pages  # same as `gh-pages-branch` in previous step
          publish_dir: ./dev/bench
          destination_dir: dev/${{ matrix.component }}/bench
          commit_message: Bench Dash (runtime, ${{ matrix.component }}) -> GH Pages

      - name: Debug branches
        run: echo "git branch" && git branch

      - name: Debug gh-pages branch contents
        run: echo "git checkout gh-pages && ls -l" && git checkout gh-pages && ls -l