name: Build & Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: '*'

jobs:

  # Build job

  build:

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        feature-set: [ "", "--all-features" ]  # no feature options ("") uses default.
                                               # --no-default-features is not allowed
                                               #     at root of virtual workspace for
                                               #     both build and test.
        

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    # TODO(#234) re-include cache steps, also using Rust version in cache key

    # Build job > Build and run steps
        
    - name: Build
      uses: actions-rs/cargo@v1.0.1
      with:
        command: build
        args: ${{ matrix.feature-set }} --verbose

    - name: Test
      uses: actions-rs/cargo@v1.0.1
      with:
        command: test
        args: ${{ matrix.feature-set }} --verbose

  # Formatting job

  format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Rust formatter
      ## make this command fail if cargo fmt had to make changes
      run: cargo fmt && git diff-index --exit-code HEAD


  # Linting job (cargo-clippy) - completes and puts warnings inline in PR

  lint:
    runs-on: ubuntu-latest

    needs: [build]

    steps:
    - uses: actions/checkout@v2

    # Linting job > Install and run clippy steps

    - name: Install clippy
      run: rustup component add clippy

    - uses: actions-rs/clippy-check@v1.0.7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --all-targets --all-features -- -D warnings

  # Benchmarking & dashboards job

  benchmark:
    strategy:
      max-parallel: 1
      fail-fast: false
      # `matrix` creates a job matrix (Cartesian product of possible values for each var)
      # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
      matrix:
        component:
          - components/locale


          # - components/num-util
          # - components/uniset
          # - utils/fixed-decimal



    # If you are modifying and debugging is required, don't be afraid to get
    # messy in a personal fork, if no better way to do it.
    # Example "debugging" workflow: https://github.com/echeran/icu4x/actions/runs/224144682/workflow

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create output dir
        run: mkdir -p ./dev/${{ matrix.component }}

      - name: Debug output dir
        run: ls -l ./dev/${{ matrix.component }}

      - name: Run benchmark
        run: cd ./dev/${{ matrix.component }} && (cargo bench -- --output-format bencher | tee output.txt) && cd ../..

      - name: Debug output dir
        run: ls -l ./dev/${{ matrix.component }}

      - name: Download previous benchmark data
        uses: actions/download-artifact@v2
        with:
          path: ./dev
          name: benchmark-perf

      - name: Debug output dir
        run: ls -l ./dev/${{ matrix.component }}

      - name: Store benchmark result (create dashboard)
        uses: rhysd/github-action-benchmark@v1.8.1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: ./dev/${{ matrix.component }}/output.txt
          benchmark-data-dir-path: ./dev/${{ matrix.component }}
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'
          fail-on-alert: true
          gh-pages-branch: gh-pages  # requires one-time-only creation of `gh-pages` branch on remote repo
          auto-push: false
          # TODO: get Github token to recognize personal access token, then enable comment-on-alert
          # Use personal access token instead of GITHUB_TOKEN due to https://github.community/t5/GitHub-Actions/Github-action-not-triggering-gh-pages-upon-push/td-p/26869/highlight/false
          # How to create personal access token: https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#permissions-for-the-github_token
          #github-token: ${{ secrets.PERSONAL_GITHUB_TOKEN_V2 }}  # this personal access token was added to ICU4X repo secrets with `repo` scope permissions
          #comment-on-alert: true
          #alert-comment-cc-users: '@sffc @zbraniecki @echeran'

      - name: Debug output dir
        run: ls -l ./dev/${{ matrix.component }}

      - name: Debug post-bench branch
        run: git branch
      
      - name: Switch branch to gh-pages to get result of benchmark pages output
        run: git checkout gh-pages

      - name: Debug output dir
        run: ls -l ./dev/${{ matrix.component }}

      - name: Debug post-switch branch
        run: git branch
      
      - name: Upload updated benchmark data
        uses: actions/upload-artifact@v2
        with:
          path: ./dev
          name: benchmark-perf

      - name: Debug post-bench git repo status #2
        run: git log | head -n 20

      # - name: Save current branch
      #   run: git checkout -b temp-branch

  # ghpages:
  #   runs-on: ubuntu-latest

  #   needs: [ benchmark ]

  #   steps:

      # - uses: actions/checkout@v2

      - name: debug workflow job dependency
        run: echo "the component value from the previous job in WF = " && echo "[ ${{ matrix.component }} ]"
      
      - name: debug current branch(es)
        run: git branch

      # - name: Checkout gh-pages
      #   run: git checkout gh-pages

      - name: Debug current dir # does ./copy-to-ext-repo exist? it shouldn't, yet
        run: ls -l .

      - name: Download previous content destined for GH pages
        uses: actions/download-artifact@v2
        with:
          path: ./copy-to-ext-repo
          name: copy-to-ext-repo

      - name: Debug copy-to-ext-repo dir # ./copy-to-ext-repo should exist, except for the very first time, due to cache
        run: ls -l .

      - name: Create folder suitable for copying to external repo
        run: mkdir -p copy-to-ext-repo 

      - name: Debug copy-to-ext-repo dir
        run: ls -l ./copy-to-ext-repo

      - name: Move bench data and HTML into a folder suitable for copying to external repo
        run: cp -v -r dev ./copy-to-ext-repo

      - name: Debug copy-to-ext-repo dir
        run: ls -l ./copy-to-ext-repo

      - name: Uploade new content destined for GH pages
        uses: actions/upload-artifact@v2
        with:
          path: ./copy-to-ext-repo
          name: copy-to-ext-repo

      - name: Dashboard -> Github Pages
        uses: peaceiris/actions-gh-pages@v3.7.0




        ## Only create docs for merges/pushes to master (skip PRs).
        ## Multiple unfinished PRs should not clobber docs from approved code.
        # if: github.event_name == 'push' && github.ref == 'refs/heads/master'




        with:
          # Setup for publishing to an external repo using `deploy_key` option:
          #
          # Step 1 - Create SSH key pair. Use your public key as a Github "Deploy Key" and your private
          # key as a Github "Secret". Where to register these keys comes next.
          # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-create-ssh-deploy-key
          #
          # Step 2 - After creating public/private key pair, put the private key in the repo running the
          # action as a Secret and call it "ACTIONS_DEPLOY_KEY". Put the public key as a Deploy Key in the
          # target repo where the Github Pages will be copied to.
          # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-deploy-to-external-repository
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}


          external_repository: echeran/icu4x-docs


          
          publish_branch: gh-pages  # same as `gh-pages-branch` in benchmark action step
          publish_dir: copy-to-ext-repo
          commit_message: Bench Dash (runtime, ${{ matrix.component }}) -> GH Pages





  # Doc-GH-Pages job

  doc_gh_pages:
    runs-on: ubuntu-latest

    needs: [build, format, benchmark]





    ## Only create docs for merges/pushes to master (skip PRs).
    ## Multiple unfinished PRs should not clobber docs from approved code.

    # if: github.event_name == 'push' && github.ref == 'refs/heads/master'




    steps:
    - uses: actions/checkout@v2

    # TODO(#234) re-include cache steps, also using Rust version in cache key

    - name: Download previous content destined for GH pages
      uses: actions/cache@v1
      with:
        path: ./copy-to-ext-repo
        key: ${{ runner.os }}-copy-to-ext-repo

    - name: Create (ensure existence of) folder suitable for copying to external repo
      run: mkdir -p copy-to-ext-repo

    - name: Debug copy-to-ext-repo dir
      run: ls -l ./copy-to-ext-repo

    # Doc-GH-Pages job > Generate `cargo doc` step

    - name: Cargo doc
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --workspace --release --all-features --no-deps

    # Doc-GH-Pages job > Generate dummy root index.html to redirect to `icu4x` crate

    - name: Create doc /index.html
      run: |
        mkdir -p copy-to-ext-repo
        cat > copy-to-ext-repo/index.html <<EOL
        <!doctype html>
        <html>
          <head>
            <meta charset="utf-8">
            <meta http-equiv="refresh" content="0;url=./doc/icu4x" />
            <title>ICU4X Developer Docs</title>
          </head>
          <body>
            <p><a href="./doc/icu4x">Redirect to icu4x crate doc</a></p>
          </body>
        </html>
        EOL

    - name: Update API docs folder in cache dir
      run: rm -rf ./copy-to-ext-repo/doc; cp -v -r target/doc ./copy-to-ext-repo
    
    - name: Debug copy-to-ext-repo dir
      run: ls -l ./copy-to-ext-repo

    # Doc-GH-Pages job > Commit docs on GH Pages branch step

    - name: Doc -> Github Pages
      uses: peaceiris/actions-gh-pages@v3.7.0
      with:
        # Setup for publishing to an external repo using `deploy_key` option:
        #
        # Step 1 - Create SSH key pair. Use your public key as a Github "Deploy Key" and your private
        # key as a Github "Secret". Where to register these keys comes next.
        # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-create-ssh-deploy-key
        #
        # Step 2 - After creating public/private key pair, put the private key in the repo running the
        # action as a Secret and call it "ACTIONS_DEPLOY_KEY". Put the public key as a Deploy Key in the
        # target repo where the Github Pages will be copied to.
        # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-deploy-to-external-repository
        deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}


        # external_repository: unicode-org/icu4x-docs
        external_repository: echeran/icu4x-docs


        publish_branch: gh-pages
        publish_dir: copy-to-ext-repo
        commit_message: Rust doc -> GH Pages
